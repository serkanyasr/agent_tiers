from typing import Protocol, Optional, List, Dict, Any


class SessionRepository(Protocol):
    async def create(self, user_id: Optional[str], metadata: Optional[Dict[str, Any]]) -> str: ...
    async def get(self, session_id: str) -> Optional[Dict[str, Any]]: ...
    async def delete(self, session_id: str) -> None: ...
    async def get_user_sessions(self, user_id: str) -> List[Dict[str, Any]]: ...
    async def check_user_exists(self, user_id: str) -> bool: ...
    


class MessageRepository(Protocol):
    async def add(self, session_id: str, role: str, content: str, metadata: Optional[Dict[str, Any]] = None) -> str: ...
    async def list(self, session_id: str, limit: Optional[int] = None) -> List[Dict[str, Any]]: ...


class DocumentRepository(Protocol):
    async def get(self, document_id: str) -> Optional[Dict[str, Any]]: ...
    async def list(self, limit: int = 100, offset: int = 0, metadata_filter: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]: ...

